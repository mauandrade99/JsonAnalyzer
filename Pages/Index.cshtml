@page
@model AnalisadorJson.Pages.IndexModel
@{
    ViewData["Title"] = "Analisador Global de Propriedades JSON";
}

<div class="text-center">
    <h1 class="display-4">Analisador Global de Propriedades JSON</h1>
    <p class="lead">Faça o upload de um arquivo JSON e conte ocorrências de qualquer propriedade em todo o documento.</p>
</div>

<div class="row">
    <div class="col-md-8 offset-md-2">
        <!-- Adicionamos um ID ao formulário para o JavaScript encontrá-lo -->
        <form id="analysis-form" method="post" enctype="multipart/form-data">
            <div class="card">
                <div class="card-header">
                    <h3>Configuração da Análise</h3>
                </div>
                <div class="card-body">
                    <!-- Div para mostrar erros de validação -->
                    <div id="validation-summary" class="text-danger mb-3"></div>

                    <div class="mb-3">
                        <label asp-for="JsonFile" class="form-label"><strong>1. Selecione o arquivo JSON:</strong></label>
                        <input asp-for="JsonFile" type="file" class="form-control" required>
                    </div>
                    <hr />
                    <div class="mb-3">
                        <label asp-for="PropertyNameToCount" class="form-label"><strong>2. Propriedade a ser Contada (Obrigatório):</strong></label>
                        <input asp-for="PropertyNameToCount" class="form-control" placeholder="Ex: status, video_id, etc." required value="status">
                    </div>
                    <div class="mb-3">
                        <label asp-for="PropertyValueToMatch" class="form-label"><strong>3. Valor para o Match (Opcional):</strong></label>
                        <input asp-for="PropertyValueToMatch" class="form-control" placeholder="Ex: active" value="active">
                        <small class="form-text text-muted">Use <strong>null</strong> para buscar valores nulos, ou deixe em branco para strings vazias.</small>
                    </div>
                    <div class="d-grid mt-4">
                        <button id="submit-button" type="submit" class="btn btn-primary btn-lg">Analisar Arquivo</button>
                    </div>
                </div>
            </div>
        </form>

        <!-- Div vazia onde os resultados serão injetados pelo JavaScript -->
        <div id="result-container" class="mt-4"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('analysis-form').addEventListener('submit', async function (event) {
            // 1. Previne o recarregamento da página
            event.preventDefault();

            const form = event.target;
            const button = document.getElementById('submit-button');
            const resultContainer = document.getElementById('result-container');
            const validationSummary = document.getElementById('validation-summary');

            // Limpa resultados e erros anteriores
            resultContainer.innerHTML = '';
            validationSummary.innerHTML = '';
            
            // Feedback visual para o usuário
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analisando...';

            try {
                // 2. Cria os dados do formulário para enviar
                const formData = new FormData(form);

                // 3. Envia os dados para o servidor "nos bastidores"
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        // Necessário para o ASP.NET Core validar a requisição
                        'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    // 4. Se a resposta for OK, pega o HTML parcial e insere na página
                    const resultHtml = await response.text();
                    resultContainer.innerHTML = resultHtml;
                } else {
                    // Se a resposta for um erro (ex: 400 Bad Request), exibe a mensagem
                    validationSummary.innerHTML = 'Ocorreu um erro. Verifique se todos os campos obrigatórios estão preenchidos e se o arquivo é válido.';
                }
            } catch (error) {
                validationSummary.innerHTML = 'Erro de rede ou falha na comunicação com o servidor.';
                console.error('Fetch error:', error);
            } finally {
                // Reabilita o botão, independentemente do resultado
                button.disabled = false;
                button.innerHTML = 'Analisar Arquivo';
            }
        });
    </script>
}