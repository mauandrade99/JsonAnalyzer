@page
@model AnalisadorJson.Pages.IndexModel
@{
    ViewData["Title"] = "JSON Analyzer";
}


<div class="text-center">
    <h1 class="display-4">Global JSON Property Analyzer</h1>
    <p class="lead">Upload a JSON file and count occurrences of any property throughout the document.</p>
</div>

<!-- Substitua o <div class="row"> existente por este -->
<div class="row g-4">
    <!-- Coluna da Esquerda: Nosso analisador de arquivos (sem mudanças na lógica) -->
    <div class="col-md-6">
        <div class="card card-dynamic-height">
            <div class="card-header">
                <h3>1. File Analysis</h3>
            </div>
            <div class="card-body">
                <form id="analysis-form" method="post" enctype="multipart/form-data">
                    <div id="validation-summary" class="text-danger mb-3"></div>
                    <div class="mb-2">
    <label asp-for="JsonFile" class="form-label"><strong>Select JSON file:</strong></label>
    
    <!-- 
      A ESTRUTURA CORRETA
      1. Escondemos o input de arquivo real com a classe 'visually-hidden'.
      2. Criamos um 'input-group' que contém um span (que mostrará o nome do arquivo)
         e um label (que agirá como nosso botão customizado).
    -->
    <div class="input-group">
      <span id="file-name-display" class="form-control">No file chosen</span>
      <label class="btn btn-outline-secondary" for="JsonFile">Browse...</label>
    </div>
    
    <!-- O input real está aqui, mas invisível para o usuário. -->
    <input asp-for="JsonFile" type="file" class="visually-hidden">

    <!-- O span de validação permanece o mesmo. -->
    <span asp-validation-for="JsonFile" class="text-danger"></span>
</div>
                    <div class="mb-2">
                        <label asp-for="PropertyNameToCount" class="form-label"><strong>Property to Count (Required):</strong></label>
                        <input asp-for="PropertyNameToCount" class="form-control" placeholder="Ex: status, video_id, etc." value="status">
                        <span asp-validation-for="PropertyNameToCount" class="text-danger"></span>
                    </div>
                    <div class="mb-2">
                        <label asp-for="PropertyValueToMatch" class="form-label"><strong>Value to Match (Optional):</strong></label>
                        <input asp-for="PropertyValueToMatch" class="form-control" placeholder="Ex: active" value="active">
                        <small class="form-text text-muted">Use <strong>|</strong> to separate multiple values (e.g., <strong>active|paused</strong>). Use null for null values.</small>
                        <span asp-validation-for="PropertyValueToMatch" class="text-danger"></span>
                    </div>
                    <div id="result-container" class="mt-2"></div>
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4 card-button-footer">
                        <button id="view-tree-button" type="button" class="btn btn-secondary" data-bs-toggle="offcanvas" data-bs-target="#jsonOffcanvas">JSON Tree</button>
                        <button id="submit-button" type="submit" class="btn btn-primary">Analyze File</button>
                    </div>
                </form>
            </div>
        </div>
       
    </div>

    <!-- === Coluna da Direita: NOSSO NOVO PLAYGROUND DE JSON === -->
    <div class="col-md-6">
         <div class="card card-dynamic-height">
            <div class="card-header">
                <h3>2. Text Validator & Viewer</h3>
            </div>
            <div class="card-body d-flex flex-column">
                <p> Paste your JSON here to validate its syntax and view it as a tree.</p>
                <div class="form-group flex-grow-1 d-flex flex-column">
                    <textarea id="json-input-area" class="form-control flex-grow-1" placeholder="Paste your JSON here..."></textarea>
                </div>
                <div class="d-grid mt-3 card-button-footer">
                    <button id="validate-button" type="button" class="btn btn-success">JSON Tree</button>
                </div>
                <!-- Área para mostrar o resultado da validação -->
                <div id="validation-result" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>


<!-- === ESTRUTURA DO PAINEL LATERAL (OFFCANVAS) === -->
<div class="offcanvas offcanvas-end offcanvas-custom-width" tabindex="-1" id="jsonOffcanvas" aria-labelledby="jsonOffcanvasLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="jsonOffcanvasLabel">JSON Viewer</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <p>Viewing the structure of the selected file. Expand the nodes to explore.</p>
    <hr>
    <!-- O visualizador em árvore será injetado aqui pelo JavaScript -->
    <div id="json-tree-container">
        <small class="text-muted">Select a file and click 'JSON Tree' to begin.</small>
    </div>
  </div>
</div>


@section Scripts {
    <script type="module">
        import { createJSONEditor } from '@Url.Content("~/lib/vanilla-jsoneditor/standalone.js")';
        const validateButton = document.getElementById('validate-button');
        if(validateButton) {
            validateButton.addEventListener('click', async function() {
                const textArea = document.getElementById('json-input-area');
                const validationResultDiv = document.getElementById('validation-result');
                const treeContainer = document.getElementById('json-tree-container');
                const jsonOffcanvas = new bootstrap.Offcanvas(document.getElementById('jsonOffcanvas'));

                const jsonText = textArea.value;
                validationResultDiv.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Validando...';

                try {
                    // Enviamos o texto para nosso novo handler no backend
                    const response = await fetch('?handler=ValidateJson', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // O Token é essencial para a segurança
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ jsonText: jsonText })
                    });
                    
                    const result = await response.json();

                    if (result.isValid) {
                        // SUCESSO! O JSON é válido.
                        validationResultDiv.innerHTML = '<div class="alert alert-success mt-2">JSON is valid!</div>';
                        
                        // Agora, usamos a lógica da nossa árvore para renderizar o resultado
                        const jsonData = JSON.parse(result.json);
                        treeContainer.innerHTML = '';
                        
                        const editor = createJSONEditor({
                            target: treeContainer,
                            props: {
                                content: { json: jsonData },
                                readOnly: true
                            }
                        });

                        // Abre o painel lateral para mostrar a árvore
                        jsonOffcanvas.show();

                    } else {
                        // FALHA! O JSON é inválido.
                        validationResultDiv.innerHTML = `<div class="alert alert-danger mt-2">${result.error}</div>`;
                    }

                } catch (error) {
                    validationResultDiv.innerHTML = `<div class="alert alert-danger mt-2">Communication erro with server.</div>`;
                }
            });
        }

        document.getElementById('analysis-form').addEventListener('submit', async function (event) {
            // 1. Previne o recarregamento da página
            event.preventDefault();

            const form = event.target;
            const button = document.getElementById('submit-button');
            // Referência correta ao container de resultados
            const resultContainer = document.getElementById('result-container'); 
            // Referência correta ao container de erros de validação
            const validationSummary = document.getElementById('validation-summary'); 

            // Limpa resultados e erros anteriores
            resultContainer.innerHTML = '';
            validationSummary.innerHTML = '';
            
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    const resultHtml = await response.text();
                    // Injeta o HTML no container correto
                    resultContainer.innerHTML = resultHtml;
                } else {
                    const errorData = await response.json();
                    let errorHtml = '<ul>';
                    for (const key in errorData) {
                        if (errorData.hasOwnProperty(key)) {
                            errorData[key].forEach(errorMessage => {
                                errorHtml += `<li>${errorMessage}</li>`;
                            });
                        }
                    }
                    errorHtml += '</ul>';
                    // Injeta os erros no container de validação correto
                    validationSummary.innerHTML = errorHtml;
                }
            } catch (error) {
                validationSummary.innerHTML = 'Network error or failure to communicate with the server.';
                console.error('Fetch error:', error);
            } finally {
                button.disabled = false;
                button.innerHTML = 'Analyse File';
            }
        });

        //import { createJSONEditor } from '@Url.Content("~/lib/vanilla-jsoneditor/standalone.js")';

        const viewTreeButton = document.getElementById('view-tree-button');
        if(viewTreeButton) {
            viewTreeButton.addEventListener('click', function() {
                const fileInput = document.getElementById('JsonFile');
                const treeContainer = document.getElementById('json-tree-container');

                
                // 1. Verifica se um arquivo foi selecionado.
                if (fileInput.files.length === 0) {
                    treeContainer.innerHTML = '<div class="alert alert-warning">Please select a file first.</div>';
                    return; // Para a execução aqui.
                }
                
                const file = fileInput.files[0];
                
                treeContainer.innerHTML = '<div class="d-flex align-items-center"><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><strong class="ms-2">Reading and processing the file...</strong></div>';

                // 4. Cria o leitor de arquivos do navegador.
                const reader = new FileReader();

                // 5. Define o que acontece QUANDO a leitura for concluída com sucesso.
                reader.onload = function(event) {
                    try {
                        const fileContent = event.target.result;
                        const jsonData = JSON.parse(fileContent);

                         
                        
                        // Limpa o container antes de adicionar o editor.
                        treeContainer.innerHTML = '';
                        
                        // Cria a instância do editor com a sintaxe correta e final.
                        const editor = createJSONEditor({
                            target: treeContainer,
                            props: {
                                content: { json: jsonData },
                                readOnly: true // Garante que seja apenas um visualizador.
                            }
                        });
                        
                    } catch (error) {
                        // Lida com erros de JSON inválido.
                        treeContainer.innerHTML = `<div class="alert alert-danger"><strong>Error processing JSON:</strong><br>${error.message}</div>`;
                    }
                };

                // 6. Define o que acontece se a leitura do arquivo falhar.
                reader.onerror = function() {
                    treeContainer.innerHTML = `<div class="alert alert-danger"> An error occurred while trying to read the file.</div>`;
                };
                
                // 7. Inicia a operação de leitura do arquivo.
                reader.readAsText(file);
            });
        }

        const realFileInput = document.getElementById('JsonFile');
        const fileNameDisplay = document.getElementById('file-name-display');

        if (realFileInput && fileNameDisplay) {
            realFileInput.addEventListener('change', function(event) {
                // Se um arquivo foi selecionado, pega o nome dele.
                if (event.target.files && event.target.files.length > 0) {
                    fileNameDisplay.textContent = event.target.files[0].name;
                } else {
                    // Se o usuário cancelou, volta para o texto padrão.
                    fileNameDisplay.textContent = 'No file chosen';
                }
            });
        }
    </script>
}